name: CD - Deploy to AKS

on:
  workflow_run:
    workflows: ["CI - Build and Push Images"]
    types: [completed]
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
  REGISTRY: ${{ secrets.ACR_NAME }}.azurecr.io
  BACKEND_IMAGE_NAME: vote-app
  FRONTEND_IMAGE_NAME: frontend-app
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}

jobs:
  deploy:
    name: Deploy to AKS
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.IMAGE_TAG }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS Context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}

      # --- Deploy the Monitoring Stack ---
      - name: Deploy Prometheus and Grafana
        run: |
          kubectl apply -f k8s/prometheus-deployment.yaml
          kubectl apply -f k8s/grafana-deployment.yaml

      # --- Deploy the Application ---
      - name: Deploy Backend App
        run: |
          sed -i 's|image: .*|image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g' k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/hpa.yaml

      - name: Wait for Backend External IP
        id: get_backend_ip
        run: |
          for i in {1..30}; do
            BACKEND_IP=$(kubectl get service vote-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "")
            if [[ -n "$BACKEND_IP" ]]; then echo "ip=$BACKEND_IP" >> "$GITHUB_OUTPUT"; exit 0; fi
            echo "Attempt $i/30: Waiting for backend IP..."
            sleep 10
          done
          echo "Error: Timed out waiting for backend IP."
          exit 1
      
      # --- IMPORTANT: Inject IP and Deploy Frontend ---
      - name: Inject Backend IP into Frontend
        run: |
          BACKEND_URL="http://${{ steps.get_backend_ip.outputs.ip }}"
          echo "Injecting backend URL into frontend: $BACKEND_URL"
          sed -i "s|___BACKEND_API_URL___|$BACKEND_URL|g" frontend/script.js

      - name: Deploy Frontend App
        run: |
          # The image was already built in CI, we just update the tag and apply
          sed -i 's|image: .*|image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g' k8s/frontend-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/frontend-service.yaml